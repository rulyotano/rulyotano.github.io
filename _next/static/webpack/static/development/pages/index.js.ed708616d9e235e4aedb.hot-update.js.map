{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.ed708616d9e235e4aedb.hot-update.js","sources":["webpack:///./src/components/DataItem.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\n// import clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Link from '@material-ui/core/Link';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandButton from './ExpandButton';\r\nimport { getGoogleImageWithSize } from 'utils/googlePhotos';\r\n\r\nexport default function DataItem({ image = null, title = \"\", place = \"\", timePeriod = \"\", placeUrl = \"\", contentParagraphs = [] }) {\r\n  const classes = useStyles();\r\n  const [isExpanded, setIsExpanded] = React.useState(false);\r\n  const isExpandable = contentParagraphs && contentParagraphs.length > 0;\r\n\r\n  const imageWithSize = useMemo(() => getGoogleImageWithSize(image, 100), [image]);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n\r\n      <Box display=\"flex\" width=\"100%\" justifyContent=\"space-between\">\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={title}\r\n          height=\"100\"\r\n          image={imageWithSize}\r\n          title={title}\r\n          className={classes.image}\r\n        />\r\n        <Hidden xsDown>\r\n          <Content classes={classes} title={title} place={place} timePeriod={timePeriod} placeUrl={placeUrl} />\r\n        </Hidden>\r\n\r\n        {isExpandable ? <Actions isExpanded={isExpanded} setIsExpanded={setIsExpanded} /> : null}\r\n      </Box>\r\n\r\n      <Hidden smUp>\r\n        <CustomDivider classes={classes} />\r\n        <Box display=\"flex\">\r\n          <Content classes={classes} title={title} place={place} timePeriod={timePeriod} placeUrl={placeUrl} />\r\n        </Box>\r\n      </Hidden>\r\n\r\n      <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\r\n        <CustomDivider classes={classes} />\r\n        <CardContent className={classes.content}>\r\n          {contentParagraphs.map((it, index) => <Typography className={classes.paragraph} component=\"p\" key={index}>{it}</Typography>)}\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst CustomDivider = ({ classes }) => {\r\n  return <Divider className={classes.mobileDivider} orientation=\"horizontal\" />\r\n}\r\n\r\nconst Content = ({ classes, title, place, placeUrl, timePeriod }) => {\r\n  return (<CardContent className={classes.content}>\r\n    <Typography variant=\"h6\" component=\"h2\" noWrap>\r\n      {title}\r\n    </Typography>\r\n    <PlaceLink placeUrl={placeUrl}>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" noWrap>\r\n        @{place} {\" \"}\r\n        <Typography component=\"i\">\r\n          {timePeriod}\r\n        </Typography>\r\n      </Typography>\r\n    </PlaceLink>\r\n  </CardContent>)\r\n}\r\n\r\nconst PlaceLink = ({ placeUrl, children }) => {\r\n  if (placeUrl) return <Link href={placeUrl} color=\"inherit\">{children}</Link>\r\n  return <>{children}</>\r\n}\r\n\r\nconst Actions = ({ isExpanded, setIsExpanded }) => {\r\n  return (<CardActions>\r\n    <ExpandButton expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)} />\r\n  </CardActions>)\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2)\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    overflow: \"hidden\"\r\n  },\r\n  mobileDivider: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  image: {\r\n    width: 100\r\n  },\r\n  paragraph: {\r\n    textIndent: theme.spacing(1),\r\n    textAlign: \"justify\"\r\n  }\r\n}))\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAhBA;AAAA;;;;A","sourceRoot":""}