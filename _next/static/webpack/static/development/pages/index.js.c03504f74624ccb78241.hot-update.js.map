{"version":3,"file":"static/webpack/static/development/pages/index.js.c03504f74624ccb78241.hot-update.js","sources":["webpack:///./src/components/DataItem.tsx"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Hidden from '@material-ui/core/Hidden';\nimport Link from '@material-ui/core/Link';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandButton from './ExpandButton';\n\nexport default function DataItem({ image = null, title = \"\", place = \"\", timePeriod = \"\", placeUrl = \"\", contentParagraphs = [] }) {\n  const classes = useStyles();\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const isExpandable = contentParagraphs && contentParagraphs.length > 0;\n\n  return (\n    <Card className={classes.root}>\n\n      <Box display=\"flex\" width=\"100%\" justifyContent=\"space-between\">\n        <CardMedia\n          component=\"img\"\n          alt={title}\n          height=\"100\"\n          image={image}\n          title={title}\n          className={classes.image}\n        />\n        <Hidden xsDown>\n          <Content classes={classes} title={title} place={place} timePeriod={timePeriod} placeUrl={placeUrl} />\n        </Hidden>\n\n        {isExpandable ? <Actions isExpanded={isExpanded} setIsExpanded={setIsExpanded} /> : null}\n      </Box>\n\n      <Hidden smUp>\n        <CustomDivider classes={classes} />\n        <Box display=\"flex\">\n          <Content classes={classes} title={title} place={place} timePeriod={timePeriod} placeUrl={placeUrl} />\n        </Box>\n      </Hidden>\n\n      <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n        <CustomDivider classes={classes} />\n        <CardContent className={classes.content}>\n          {contentParagraphs.map((it, index) => <Typography className={classes.paragraph} component=\"p\" key={index}>{it}</Typography>)}\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}\n\nconst CustomDivider = ({ classes }) => {\n  return <Divider className={classes.mobileDivider} orientation=\"horizontal\" />\n}\n\nconst Content = ({ classes, title, place, placeUrl, timePeriod }) => {\n  return (<CardContent className={classes.content}>\n    <Typography variant=\"h6\" component=\"h2\" noWrap>\n      {title}\n    </Typography>\n    <PlaceLink placeUrl={placeUrl}>\n      <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" noWrap>\n        @{place} {\" \"}\n        <Typography component=\"i\">\n          {timePeriod}\n        </Typography>\n      </Typography>\n    </PlaceLink>\n  </CardContent>)\n}\n\nconst PlaceLink = ({ placeUrl, children }) => {\n  if (placeUrl) return <Link href={placeUrl} color=\"inherit\">{children}</Link>\n  return <>{children}</>\n}\n\nconst Actions = ({ isExpanded, setIsExpanded }) => {\n  return (<CardActions>\n    <ExpandButton expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)} />\n  </CardActions>)\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2)\n  },\n  content: {\n    flexGrow: 1,\n    overflow: \"hidden\"\n  },\n  mobileDivider: {\n    width: \"100%\",\n    marginBottom: theme.spacing(1),\n  },\n  image: {\n    width: 150\n  },\n  paragraph: {\n    textIndent: theme.spacing(2)\n  }\n}))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AAAA;;;;A","sourceRoot":""}