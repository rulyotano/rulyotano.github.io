{"version":3,"file":"static/webpack/static/development/pages/index.js.db8354911ea78f9fd5ae.hot-update.js","sources":["webpack:///./src/components/ExpandButton.tsx","webpack:///./src/components/ReferenceIcon.tsx"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nexport default function ExpandButton({ expanded = false, onClick = (e: React.MouseEvent<HTMLButtonElement>) => { }, label = \"show more\" }) {\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={clsx(classes.expand, {\n        [classes.expandOpen]: expanded,\n      })}\n      onClick={onClick}\n      aria-expanded={expanded}\n      aria-label={label}\n    >\n      <ExpandMoreIcon />\n    </IconButton>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n}))\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandButton from './ExpandButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport Popover from '@material-ui/core/Popover';\n\ninterface ReferenceIconProps {\n  icon?: any,\n  description?: any,\n  href?: string,\n  expandContent?: any,\n}\n\nexport default function ReferenceIcon({ icon: Icon, description = \"\", href = \"\", expandContent }: ReferenceIconProps) {\n  const classes = useStyles();\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" height={48}>\n        <Icon />\n        <Box ml={1} />\n        <Typography>\n          {href ? <Link href={href} color=\"inherit\">{description}</Link> : description}\n        </Typography>\n        {expandContent ? <ExpandButton expanded={isExpanded} onClick={handleClick} /> : null}\n      </Box>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        {expandContent}\n      </Popover>\n      {/* <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          {expandContent}\n        </Box>\n      </Collapse> */}\n    </>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n  }\n}))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AADA;AARA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAEA;AAAA;AACA;AADA;AAAA;;;;A","sourceRoot":""}